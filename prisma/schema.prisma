generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?
  gmailAccessToken  String?
  gmailConnected    Boolean         @default(false)
  gmailLastSynced   DateTime?
  gmailRefreshToken String?
  gmailTokenExpiry  DateTime?
  fullBodyPhoto     String?
  accounts          Account[]
  calendarEvents    CalendarEvent[]
  outfits           Outfit[]
  sessions          Session[]
  wardrobe          Wardrobe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wardrobe {
  id             String       @id @default(cuid())
  userId         String
  brand          String
  name           String
  price          String
  originalPrice  String?
  discount       String?
  image          String?
  productLink    String?
  myntraLink     String?
  size           String?
  color          String?
  dateAdded      DateTime     @default(now())
  source         String?
  sourceEmailId  String?
  sourceOrderId  String?
  sourceRetailer String?
  category       String?      @default("Uncategorized")
  colorTag       String?
  dominantColor  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfitItems    OutfitItem[]

  // Add unique constraint for deduplication based on brand, name, and size
  @@unique([userId, brand, name, size])
}

model Outfit {
  id             String          @id @default(cuid())
  name           String
  userId         String
  tryOnImage     String?         // Base64 encoded try-on image
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  calendarEvents CalendarEvent[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items          OutfitItem[]
}

model OutfitItem {
  id             String   @id @default(cuid())
  outfitId       String
  wardrobeItemId String
  left           Float    @default(0)
  top            Float    @default(0)
  width          Float    @default(150)
  height         Float    @default(150)
  zIndex         Int      @default(1)
  isPinned       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  outfit         Outfit   @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  wardrobeItem   Wardrobe @relation(fields: [wardrobeItemId], references: [id], onDelete: Cascade)

  @@index([outfitId])
  @@index([wardrobeItemId])
}

model CalendarEvent {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  outfitId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outfit    Outfit   @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
