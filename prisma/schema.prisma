// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wardrobe      Wardrobe[]
  outfits       Outfit[]
  calendarEvents CalendarEvent[]
  // Gmail OAuth fields
  gmailAccessToken   String?    @db.Text
  gmailRefreshToken  String?    @db.Text
  gmailTokenExpiry   DateTime?
  gmailConnected     Boolean    @default(false)
  gmailLastSynced    DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wardrobe {
  id            String   @id @default(cuid())
  userId        String
  brand         String
  name          String
  price         String
  originalPrice String?
  discount      String?
  image         String?
  productLink   String?
  myntraLink    String?
  size          String?
  color         String?
  category      String?  @default("Uncategorized")
  dateAdded     DateTime @default(now())
  // Source tracking for items added from emails
  source        String?  // 'email', 'manual', etc.
  sourceEmailId String?  // Reference to the email ID this was extracted from
  sourceOrderId String?  // Order ID from the email
  sourceRetailer String? // Retailer name (Myntra, H&M, etc.)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfitItems   OutfitItem[]
}

model Outfit {
  id        String      @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OutfitItem[]
  calendarEvents CalendarEvent[]
}

model OutfitItem {
  id            String   @id @default(cuid())
  outfitId      String
  wardrobeItemId String
  left          Float
  top           Float
  zIndex        Int
  width         Float    @default(150)
  height        Float    @default(150)
  isPinned      Boolean  @default(false)
  outfit        Outfit   @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  wardrobeItem  Wardrobe @relation(fields: [wardrobeItemId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  outfitId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outfit    Outfit   @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
